<!--
Copyright Glen Knowles 2006.
Distributed under the Boost Software License, Version 1.0.

character_edit.rhtml - gw1builds view build
-->
<script type="text/javascript">
<%
paneRef = menuId + "_charedit"
%>
<%= paneRef %> = new Pane({
  title: "Character Edit",
  id: "<%= paneRef %>",

  isSkillbarOpen: false,
  isToonDetailOpen: true,

  onload: function() {
    this.loadElems();
    this.elems.edit.toonInfoEl.appendChild(dojo.byId('toonInfo'));
    initToonInfo(this.elems.edit);
    if (this.isSkillbarOpen !=
      (g_store.get(g_store.keys.SKILLBAR_MODE) == 'tweak'))
    {
      this.toggleSkillbar(this.elems.edit.skillbar2ModeEl);
    }
    if (this.isToonDetailOpen !=
      (g_store.get(g_store.keys.TOON_DETAIL_OPEN) != 'false'))
    {
      this.toggleToonDetail(this.elems.edit.toonDetailOpenEl);
    }
  },

  onprepare: function() {
    this.elems.edit.el.style.visibility = 'visible';
    if (g_state.getMember() == null) {
      var team = g_state.getTeam();
      var slots = team.slotRefs(false);
      if (slots.length == 0) {
        slots = team.slots();
        if (slots.length == 0) team.insertSlot(0, null);
        var toon = new Character('New Character');
        toon.teamPos = 0;
        team.setSlot(0, toon);
        slots = team.slotRefs(false);
      }
      g_state.setMember(slots[0].value);
    }
    this.elems.edit.toonInfoEl.appendChild(dojo.byId('toonInfo'));
    var gridEl = dojo.byId('attrGrid');
    gridEl.style.display = '';
    this.elems.edit.toonDetailEl.appendChild(gridEl);
    this.elems.edit.skillListEl.appendChild(dojo.byId('skillList'));
    this.elems.edit.skillFavoritesEl.appendChild(
      dojo.byId('skillFavorites'));
    this.elems.edit.skillbarEl.appendChild(dojo.byId('skillbar'));
  },

  onactive: function() {
    this.onupdate( {keys: Character.prototype.changeKeys} );
    DDSkillList.ensureListFormat();
  },

  onblur: function() {
    var el = this.elems.edit.el;
    el.style.visibility = 'hidden';
    var parEl = el.parentNode;
    var tmpEl = document.createElement('div');
    tmpEl.style.backgroundColor = 'lightgrey';
    tmpEl.style.height = el.offsetHeight + 'px';
    tmpEl.style.width = el.offsetWidth + 'px';
    parEl.replaceChild(tmpEl, el);
    parEl.replaceChild(el, tmpEl);
  },

  onupdate: function(upd) {
    if (upd.keys.paneSet) {
      return;
    }
    updBuildInfo(upd, this.elems.edit.formEl);
    updToonInfo(upd, this.elems.edit.formEl);
    updAttrGrid(upd);
    DDItemGrid.update(upd);
    updSkillbar(upd);
    DDSkillList.updWidget(upd);
    updSkillFavorites(upd, /*attrSource=*/g_state.getMember());
  }, // update()

  toggleToonDetail: function(openEl) {
    var divEl = this.elems.edit.toonDetailEl;
    if (this.isToonDetailOpen) {
      openEl.src = '/images/toggle-closed.png';
      openEl.onmouseover = new Function("event",
        "DDToonAttrs.over(this, event, {toon: g_state.getMember()})");
      divEl.style.display = 'none';
      this.isToonDetailOpen = false;
    } else {
      openEl.src = '/images/toggle-open.png';
      openEl.onmouseover = null;
      divEl.style.display = '';
      this.isToonDetailOpen = true;
    }
    g_store.set(g_store.keys.TOON_DETAIL_OPEN, String(this.isToonDetailOpen));
  }, // toggleAttrGrid(openEl)

  toggleSkillbar: function(openEl) {
    var sb2 = this.elems.edit.skillbar2El;
    if (this.isSkillbarOpen) {
      openEl.src = '/images/toggle-closed.png';
      setSkillbarMode( {basic: true} );
      this.isSkillbarOpen = false;
    } else {
      openEl.src = '/images/toggle-open.png';
      setSkillbarMode( {tweak: true} );
      this.isSkillbarOpen = true;
    }
  } // toggleSkillbar(openEl)

} );

PaneSet.prototype.addPane("<%= menuId %>", <%= paneRef %>);
</script>
<div class="pane toonPane editPane" id="<%= paneRef %>"
  style="clear: both; display: none">
<!-- this comment (or anything else) is required between the
div above and table below to prevent IE from 'bouncing' -->
<table class='pane' cellspacing='0'><tr><td class='paneContent'>
  <div class="pdiv-edit">
    <form>
    <h2>
      <span class='withTabs'>
        <input type='text' size='40' name='pImport2'>
        <button type='button' title='Import Anet or GB template code'
          onclick="importToon(this.form.pImport2.value);
            this.form.pImport2.value = '';"
          >Import</button>
      </span>
      <img class="pvar-toonDetailOpen openClose"
      src="/images/toggle-open.png"
      onclick="<%= paneRef %>.toggleToonDetail(this)"
      onmouseout="DDToonAttrs.out(this, event)">
      Character
    </h2>
    <div class="pvar-toonInfo"></div>
    <div class="pvar-toonDetail toonDetail"></div>
    <table class='inset' cellspacing='0' cellpadding='0'><tr><td valign='top'>
    <div class="pvar-skillList"></div>
    </td><td valign='top'>
    <div class="pvar-skillFavorites"></div>
    </td><td valign='top'>
    <div class="skillbar">
      <h2>
        <span style='float: right'>
          &nbsp;
          <button type='button' title="Add alternate skill slot"
            onclick="chgToonAppendAlt()"
            >+ Alt</button>
        </span>
        <img class="pvar-skillbar2Mode openClose"
          src="/images/toggle-closed.png"
          onclick="<%= paneRef %>.toggleSkillbar(this)">
        Skillbar
      </h2>
      <div style='clear: both' class="pvar-skillbar"></div>
    </div>
    </td></tr></table>
    </form>
  </div>
</td><td class='paneSidebar'>
  <div class='pvar-sidebar sidebar'>
    <%= render :partial => "welcome/sidebar", :locals => { :menuId => menuId } %>
  </div>
</td></tr></table>
</div>
